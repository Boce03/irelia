%{
    #include <iostream>
    #include <cstdlib>
    #include <cstdio>
    #include <string>
    #include <vector>
    #include <unordered_map>

    extern int yylex();

    void yyerror(const std::string& msg) {
        std::cerr << "Error: " << msg << std::endl;
        exit(EXIT_FAILURE);
    }

    std::vector<std::string> options;
    std::vector<std::string> files;
    std::vector<std::string> g_targets;
    std::vector<std::string> targets;
%}


%union {
    std::string* s;
}

%token CONFIG_T GLOBAL_TARGET_T
%token<s> TARGET_T ASSET_T OPTION_T EXECUTE_T

%nonassoc NO_NEW_LINE
%nonassoc '\n'

%type new_lines
%type sentence sentence_wrapper 
%type list_options list_files list_global_targets list_targets

%start program

%%

program: program sentence_wrapper
    | sentence_wrapper
    ;

/*
    sentence_wrapper is used so i can use '\n' or nothing (in this case it would be EOF)
    like endpoint (delimiter) of sentence, so it would be clearer and without more branching in one grammar rule
*/

sentence_wrapper: sentence '\n'
    | sentence %prec NO_NEW_LINE
    | '\n'
    ;

sentence: CONFIG_T ':' list_options {
        std::cout << "config:";
        for (std::string& option : options) {
            std::cout << " " << option;
        }
        std::cout << "\n\n";
    }
    | GLOBAL_TARGET_T ':' list_global_targets {
        std::cout << "global target:";
        for (std::string& g_target : g_targets) {
            std::cout << " " << g_target;
        }
        std::cout << "\n\n";
    }
    | list_targets ':' list_files new_lines '>' EXECUTE_T {
        std::cout << "target:";
        for (std::string& target : targets) {
            std::cout << " " << target;
        }

        std::cout << "\nassets:";
        for (std::string& file : files) {
            std::cout << " " << file;
        }
        std::cout << "\nexecute: " << (*$6) << "\n\n";

        delete $6;
    }
    ;

/*
    so it would be possible to have multiple new lines between specification of targets and assets and execute part in rule
*/
new_lines: new_lines '\n'
    | '\n'
    ;

list_files: list_files ASSET_T {
        files.push_back(*$2);
        delete $2;
    }
    | ASSET_T {
        files.clear();
        files.push_back(*$1);
        delete $1;
    }
    ;

list_targets: list_targets TARGET_T {
        targets.push_back(*$2);
        delete $2;
    }
    | TARGET_T {
        targets.clear();
        targets.push_back(*$1);
        delete $1;
    }
    ;

list_options: list_options OPTION_T {
        options.push_back(*$2);
        delete $2;
    }
    | OPTION_T {
        options.push_back(*$1);
        delete $1;
    }
    ;

list_global_targets: list_global_targets ASSET_T {
        g_targets.push_back(*$2);
        delete $2;
    }
    | ASSET_T {
        g_targets.push_back(*$1);
        delete $1;
    }
    ;


%%

int main(int argc, char** argv) {
    if (yyparse() == 0) {
        std::cout << "Sve ok!" << std::endl;
    } else {
        std::cout << "Greska!" << std::endl;
    }

    exit(EXIT_SUCCESS);
}